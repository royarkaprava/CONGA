for(i in 1:length(w$data)){
#betasc <- c(betasc, rep(length(w$data[[i]]), length(w$data[[i]])))
cv  <- c(cv, rep(rexp(1, length(w$data[[i]])), length(w$data[[i]])))
}
betasc <- rep(1, Ti)
theta <- 0.01
eigendatapo <- function(x, I){
ret <- rep(0, n)
for(i in 1:Ti){
ret <- ret + B[I, i]^2*array((n/cv[i])^(2/r)*(x+1/n^2))^rep(-theta-r/2, n)
}
return(ret)
}
eigendatawpo <- function(x, I){
ret <- as.vector((n/cv[I])^(2/r)*(x+1/n^2))^rep(-theta-r/2, n)
return(ret)
}
psi   <- 2
#cv <- rep(1, Ti) # rexp(Ti)
eigendataexp <- function(x, I){
ret <- rep(0, n)
for(i in 1:Ti){
ret <- ret + basis[I, i]^2*exp(-(n/cv[i])^(2/r)*x + log(n))
}
return(ret)
}
eigendatawexp <- function(x, I){
ret <- exp(-(n/cv[I])^(2/r)*x + log(n))
return(ret)
}
sigma=1
#im <- mice(t(datan))
impdmice <- t(as.matrix(complete(im)))
mf1 <- missForest(t(datan))
data1f <- t(mf1$ximp)
am1 <- amelia(t(datan))
data1a <- t(am1$missMatrix)
print(mean((data[wh]-impdmice[wh])^2))
print(mean((data[wh]-data1f[wh])^2))
print(mean((data[wh]-data1a[wh])^2))
vara <- VAR(t(data[, - Ti]))#, ic="AIC", type = "none", lag.max = 10)
pred <- predict(vara, n.ahead = 1)
print(mean(as.matrix((data[, Ti]-data2f[wh])^2)))
data2t <- data.frame(t(datan))
formula <- paste("~",paste(colnames(data2t), collapse=" + "))
#mt2 <- mnimput(formula, data2t)
data2f <- (mt2$filled.dataset)
print(mean(as.matrix((data[wh]-data2f[wh])^2)))
dataUniimp <- datan
for(i in 1:n){
dataUniimp[i, ] <- na_interpolation(datan[i, ], option = "spline")
}
print(mean(as.matrix((data[, Ti]-dataUniimp[, Ti])^2)))
impd <- data1f
sd=rep(1e-3, length(w$data))
Total_itr <- 50000
theta_p   <- list()
beta_p    <- list()
sigma_p   <- list()
cv_p      <- list()
impdp     <- list()
itr       <- 0
al        <- 0.1
be        <- 0.1
betacoef <- impd %*% t(B)
arc <- rep(0, length(w$data))
sdth <- 1e-6
arth <- 0
#theta_p <- rep(0, Total_itr)
msevec  <- rep(0, Total_itr)
meanmat <- data#impd
library(CARBayesdata)
library("dplyr")
library("spdep")
library(wmtsa)
library(mvtnorm)
library(missForest)
library(mice)
library(Amelia)
library(mtsdi)
library(BDgraph)
library(pracma)
library(igraph)
HMC = function (U, grad_U, epsilon, L = 30, s, current_q, arc)
{
q = current_q
p = rnorm(length(q),0,1)  # independent standard normal variates
current_p = p
# Make a half step for momentum at the beginning
p = p - epsilon * grad_U(q, s) / 2
# Alternate full steps for position and momentum
for (j in 1:L)
{
# Make a full step for the position
q = max(q + epsilon * p, 0)
# Make a full step for the momentum, except at end of trajectory
if (j!=L) p = p - epsilon * grad_U(q, s)
}
# Make a half step for momentum at the end.
p = p - epsilon * grad_U(q, s) / 2
# Negate momentum at end of trajectory to make the proposal symmetric
p = -p
# Evaluate potential and kinetic energies at start and end of trajectory
current_U = U(current_q, s)
current_K = sum(current_p^2) / 2
proposed_U = U(q, s)
proposed_K = sum(p^2) / 2
# Accept or reject the state at end of trajectory, returning either
# the position at the end of the trajectory or the initial position
R <- exp(current_U-proposed_U+current_K-proposed_K)
if(is.na(R)) {R = 0}
if(is.nan(R)) {R = 0}
if (runif(1) < R)
{
up = q  # accept
arc <- arc + 1
}
else
{
up = current_q
}
return(list(up = up, arc = arc))  # reject
}
U <- function(x, s){
ret <- s * x ^ (-(2*theta+r)/r) + ((2*theta+r)/r) * log(x) * lw * n + 2*x/lw^(2)
return(ret/2)
}
grad_U <- function(x, s){
ret <- ((2*theta+r)/r) * lw * n/ x - ((2*theta+r)/r)*s*x^(-2*theta/r-2) + 2/lw^(2)
return(ret/2)
}
Uth <- function(x){
y <- x#as.numeric(exp(x))
k <- 1
sum1 <- 0
for(i in 1:length(w$data)){
for(j in 1:length(w$data[[i]])){
temp <- array((n/cv[k])^(2/r)*(Lei+1/n^2))^rep(y+r/2, n)
Ivar <- Lev %*% diag(temp) %*% t(Lev)
sum1 <- sum1 + sigma^(-2)*t(betacoef[, k]) %*% Ivar %*% betacoef[, k]
sum1 <- sum1 + (y+r/2) * sum(log((n/cv[k])^(2/r)*(Lei+1/n^2))) * n
k   <- k + 1
}
}
return(sum1/2 - dgamma(1/x, 0.1, 0.1, log = T))
}
grad_Uth <- function(x){
y <- x#as.numeric(exp(x))
k <- 1
sum1 <- 0
for(i in 1:length(w$data)){
for(j in 1:length(w$data[[i]])){
temp <- array(((n/cv[k])^(2/r)*(Lei+1/n^2))^rep(y+r/2, n))
temp <- temp * array(log((cv[k])^(2/r)*(Lei+1/n^2)))
Ivar <- Lev %*% diag(temp) %*% t(Lev)
sum1 <- sum1 + sigma^(-2)*t(betacoef[, k]) %*% Ivar %*% betacoef[, k]
sum1 <- sum1 + sum(log((n/cv[k])^(2/r)*(Lei+1/n^2)))*n#*y
k   <- k + 1
}
}
return(sum1/2+(0.1+1)/x-0.1/x^2)#x/100)
}
HMCth = function (U, grad_U, epsilon, L = 30, current_q, ard)
{
q = current_q
p = rnorm(length(q),0,1)  # independent standard normal variates
current_p = p
# Make a half step for momentum at the beginning
p = p - epsilon * grad_U(q) / 2
# Alternate full steps for position and momentum
for (j in 1:L)
{
# Make a full step for the position
q = max(q + epsilon * p,0)
# Make a full step for the momentum, except at end of trajectory
if (j!=L) p = p - epsilon * grad_U(q)
}
# Make a half step for momentum at the end.
p = p - epsilon * grad_U(q) / 2
# Negate momentum at end of trajectory to make the proposal symmetric
p = -p
# Evaluate potential and kinetic energies at start and end of trajectory
current_U = U(current_q)
current_K = sum(current_p^2) / 2
proposed_U = U(q)
proposed_K = sum(p^2) / 2
# Accept or reject the state at end of trajectory, returning either
# the position at the end of the trajectory or the initial position
R <- exp(current_U-proposed_U+current_K-proposed_K)
if(is.na(R)) {R = 0}
if(is.nan(R)) {R = 0}
if (runif(1) < R)
{
up = q  # accept
ard <- ard + 1
}
else
{
up = current_q
}
return(list(up = (up), ard = ard))  # reject
}
NOAA <- read.csv("C:/Users/arkap/Downloads/NOAA.csv", header=FALSE)
NOAAmat <- matrix(NOAA[, 12], 159, 365, byrow = T)
data <- NOAAmat[, 121:184]
data <- data[-151, ]
n <- 158
NOAAloc <- as.matrix(NOAA[0:158*365+1, 9:10])
NOAAloc <- NOAAloc[-151, ]
dmat <- as.matrix(dist(NOAAloc))
quantile(dmat[upper.tri(dmat, diag = F)], probs = c(0.15, 0.85))
Ti <- 64
w    <- wavDWT(rnorm(Ti))
# basis <- matrix(NA,Ti,Ti)
# compt <- 1
#
# for (i in 1:length(w$data))
#   w$data[[i]]<-rep(0,length(w$data[[i]]))
#
# for (i in 1:length(w$data)){
#   for (j in 1:length(w$data[[i]])){
#     w$data[[i]][j] <- 1
#     basis[,compt] <- reconstruct(w)
#     w$data[[i]][j] <- 0
#     compt <- compt + 1
#   }
# }
J  <- as.integer(log2(Ti))
J0 <- J
wavelet <- 's8'
B <- t(basis)#wavDWTMatrix(wavelet = wavelet, J = J, J0 = J0)
W <- (dmat < 1)
L  <- (diag(rowSums(W))-W)
Le  <- eigen(L)
Lei    <- Le$values
Lei[n] <- 0
Lev <- Le$vectors
zind <- which(abs(Lei)<1e-8)
png("real.png", height = 4, width=4, units = "in", res=600)
plot(log((n-length(zind)):1/n), log(Lei[-zind]), ylab = "Logarithm of eigen-values", xlab = "log(i/n)", cex.lab=1.5)
fit <- lm(log(Lei[-zind])~log((n-length(zind)):1/n))
abline(fit, col = 2, lwd = 2)
dev.off()
Lei[zind] <- 0
r <- as.numeric(2/fit$coefficients[2])
print(r)
set.seed(1)
datan <- data
#for(i in 1:Ti){
#  q               <- 0.5#runif(1, 0, 0.5)
#  index           <- array(sample(1:(Ti*n), round(q*n*Ti)))
#  datan[index] <- NA
#}
datan[, Ti] <- NA
wh  <- which(is.na(datan))
betasc <- NULL#rep(1, Ti)#rexp(Ti)
cv <- NULL
for(i in 1:length(w$data)){
#betasc <- c(betasc, rep(length(w$data[[i]]), length(w$data[[i]])))
cv  <- c(cv, rep(rexp(1, length(w$data[[i]])), length(w$data[[i]])))
}
betasc <- rep(1, Ti)
theta <- 0.01
eigendatapo <- function(x, I){
ret <- rep(0, n)
for(i in 1:Ti){
ret <- ret + B[I, i]^2*array((n/cv[i])^(2/r)*(x+1/n^2))^rep(-theta-r/2, n)
}
return(ret)
}
eigendatawpo <- function(x, I){
ret <- as.vector((n/cv[I])^(2/r)*(x+1/n^2))^rep(-theta-r/2, n)
return(ret)
}
psi   <- 2
#cv <- rep(1, Ti) # rexp(Ti)
eigendataexp <- function(x, I){
ret <- rep(0, n)
for(i in 1:Ti){
ret <- ret + basis[I, i]^2*exp(-(n/cv[i])^(2/r)*x + log(n))
}
return(ret)
}
eigendatawexp <- function(x, I){
ret <- exp(-(n/cv[I])^(2/r)*x + log(n))
return(ret)
}
sigma=1
#im <- mice(t(datan))
impdmice <- t(as.matrix(complete(im)))
mf1 <- missForest(t(datan))
data1f <- t(mf1$ximp)
am1 <- amelia(t(datan))
data1a <- t(am1$missMatrix)
print(mean((data[wh]-impdmice[wh])^2))
print(mean((data[wh]-data1f[wh])^2))
print(mean((data[wh]-data1a[wh])^2))
vara <- VAR(t(data[, - Ti]))#, ic="AIC", type = "none", lag.max = 10)
pred <- predict(vara, n.ahead = 1)
print(mean(as.matrix((data[, Ti]-data2f[wh])^2)))
data2t <- data.frame(t(datan))
formula <- paste("~",paste(colnames(data2t), collapse=" + "))
#mt2 <- mnimput(formula, data2t)
data2f <- (mt2$filled.dataset)
print(mean(as.matrix((data[wh]-data2f[wh])^2)))
dataUniimp <- datan
for(i in 1:n){
dataUniimp[i, ] <- na_interpolation(datan[i, ], option = "spline")
}
print(mean(as.matrix((data[, Ti]-dataUniimp[, Ti])^2)))
impd <- data1f
sd=rep(1e-3, length(w$data))
Total_itr <- 50000
theta_p   <- list()
beta_p    <- list()
sigma_p   <- list()
cv_p      <- list()
impdp     <- list()
itr       <- 0
al        <- 0.1
be        <- 0.1
betacoef <- impd %*% t(B)
arc <- rep(0, length(w$data))
sdth <- 1e-6
arth <- 0
#theta_p <- rep(0, Total_itr)
msevec  <- rep(0, Total_itr)
meanmat <- data#impd
B <- wavDWTMatrix(wavelet = wavelet, J = J, J0 = J0)#t(basis)#
W <- (dmat < 1)
L  <- (diag(rowSums(W))-W)
Le  <- eigen(L)
Lei    <- Le$values
Lei[n] <- 0
Lev <- Le$vectors
zind <- which(abs(Lei)<1e-8)
png("real.png", height = 4, width=4, units = "in", res=600)
plot(log((n-length(zind)):1/n), log(Lei[-zind]), ylab = "Logarithm of eigen-values", xlab = "log(i/n)", cex.lab=1.5)
fit <- lm(log(Lei[-zind])~log((n-length(zind)):1/n))
abline(fit, col = 2, lwd = 2)
dev.off()
Lei[zind] <- 0
r <- as.numeric(2/fit$coefficients[2])
print(r)
set.seed(1)
datan <- data
#for(i in 1:Ti){
#  q               <- 0.5#runif(1, 0, 0.5)
#  index           <- array(sample(1:(Ti*n), round(q*n*Ti)))
#  datan[index] <- NA
#}
datan[, Ti] <- NA
wh  <- which(is.na(datan))
betasc <- NULL#rep(1, Ti)#rexp(Ti)
cv <- NULL
for(i in 1:length(w$data)){
#betasc <- c(betasc, rep(length(w$data[[i]]), length(w$data[[i]])))
cv  <- c(cv, rep(rexp(1, length(w$data[[i]])), length(w$data[[i]])))
}
betasc <- rep(1, Ti)
theta <- 0.01
eigendatapo <- function(x, I){
ret <- rep(0, n)
for(i in 1:Ti){
ret <- ret + B[I, i]^2*array((n/cv[i])^(2/r)*(x+1/n^2))^rep(-theta-r/2, n)
}
return(ret)
}
eigendatawpo <- function(x, I){
ret <- as.vector((n/cv[I])^(2/r)*(x+1/n^2))^rep(-theta-r/2, n)
return(ret)
}
psi   <- 2
#cv <- rep(1, Ti) # rexp(Ti)
eigendataexp <- function(x, I){
ret <- rep(0, n)
for(i in 1:Ti){
ret <- ret + basis[I, i]^2*exp(-(n/cv[i])^(2/r)*x + log(n))
}
return(ret)
}
eigendatawexp <- function(x, I){
ret <- exp(-(n/cv[I])^(2/r)*x + log(n))
return(ret)
}
sigma=1
#im <- mice(t(datan))
impdmice <- t(as.matrix(complete(im)))
mf1 <- missForest(t(datan))
data1f <- t(mf1$ximp)
am1 <- amelia(t(datan))
data1a <- t(am1$missMatrix)
print(mean((data[wh]-impdmice[wh])^2))
print(mean((data[wh]-data1f[wh])^2))
print(mean((data[wh]-data1a[wh])^2))
vara <- VAR(t(data[, - Ti]))#, ic="AIC", type = "none", lag.max = 10)
pred <- predict(vara, n.ahead = 1)
print(mean(as.matrix((data[, Ti]-data2f[wh])^2)))
data2t <- data.frame(t(datan))
formula <- paste("~",paste(colnames(data2t), collapse=" + "))
#mt2 <- mnimput(formula, data2t)
data2f <- (mt2$filled.dataset)
print(mean(as.matrix((data[wh]-data2f[wh])^2)))
dataUniimp <- datan
for(i in 1:n){
dataUniimp[i, ] <- na_interpolation(datan[i, ], option = "spline")
}
print(mean(as.matrix((data[, Ti]-dataUniimp[, Ti])^2)))
impd <- data1f
sd=rep(1e-3, length(w$data))
Total_itr <- 10000
theta_p   <- list()
beta_p    <- list()
sigma_p   <- list()
cv_p      <- list()
impdp     <- list()
itr       <- 0
al        <- 0.1
be        <- 0.1
betacoef <- impd %*% t(B)
arc <- rep(0, length(w$data))
sdth <- 1e-6
arth <- 0
#theta_p <- rep(0, Total_itr)
msevec  <- rep(0, Total_itr)
meanmat <- data#impd
while(itr < Total_itr){
itr <- itr + 1
impdwv <- impd %*% t(B)
sum1 <- 0
for(i in 1:Ti){
vary <- betasc[i] * Lev %*% diag(((n/cv[i])^(2/r)*(Lei+1/n^2))^rep(theta+r/2, n)) %*% t(Lev)
sum1 <- sum1 + t(betacoef[, i]) %*% vary %*% betacoef[, i]
}
alphag <- al + prod(dim(impd)) - length(wh) / 2 #/ 2 #
betag  <- be + sum((impd[-wh] - meanmat[-wh])^2)/2 + sum1/2 #[-wh]
sigma  <- sqrt(1 / rgamma(1, alphag, betag))
for(i in 1:Ti){
betamean        <- impdwv[, i] / sigma^2
betavar         <- sigma^(2)*Lev %*% diag(1/(betasc[i]/eigendatawpo(Lei, i) + rep(1, n))) %*% t(Lev)
#if
betacoef[, i]   <- rmvnorm(1, betavar %*% betamean, betavar)
}
temp         <- betacoef %*% B
#print(mean((temp-meanmat)^2))
meanmat <- temp
#impd <- datan
for(i in 1:Ti){
#vary       <- Lev %*% diag(eigendatapo(Lei, i)) %*% t(Lev)
c          <- which(is.na(datan[, i])==T)
if(length(c) > 0){
# var11        <- vary[c, c]
# var12        <- matrix(vary[c, -c], length(c))
# var22        <- vary[-c, -c]
# barvar1      <- var11 - var12 %*% solve(var22) %*% t(var12)
# barvar1      <- (barvar1 + t(barvar1)) / 2
# barmu1       <- var12 %*% solve(var22) %*% betacoef[-c, i]
#bar1         <- rmvnorm(1, barmu1, barvar1)
impdwv[c, i]   <- betacoef[c, i]#array(rnorm(length(c), meanmat[c, i], sigma))
}
}
temp         <- impdwv %*% B
#print(mean((temp- impd )^2))
impd <- temp
#############Update c
k <- 1
for(i in 1:length(w$data)){
sum1 <- 0
for(j in 1:length(w$data[[i]])){
var <- Lev %*% diag(((n)^(2/r)*(Lei+1/n^2))^rep(theta+r/2, n)) %*% t(Lev)
sum1 <- sum1 + betasc[i] * sigma^(-2)*t(betacoef[, k]) %*% var %*% betacoef[, k]
k   <- k + 1
}
lw <- length(w$data[[i]])
if(itr<=100){
ctemp <- HMC(U, grad_U, epsilon = sd[i], L = 10, sum1, cv[k-1], arc[i])
}
#rexp(1, sum + length(w$data[[1]]) ^ psi)
if(itr>100){
ctemp <- HMC(U, grad_U, epsilon = sd[i], L = 10, sum1, cv[k-1], arc[i])
}
arc[i] <- ctemp$arc
ctemp  <- ctemp$up
cv[(k - length(w$data[[i]])):(k-1)] <- rep(ctemp, length(w$data[[i]]))
}
thtemp <- HMCth(Uth, grad_Uth, epsilon = sdth, L = 10, theta, arth)
theta <- thtemp$up
arth  <- thtemp$ard
#theta_p[itr] <- theta
if(itr %% 100 == 0){
for(i in 1:length(w$data)){
ar <- arc[i]/ itr
cat(ar, "for delta")
if(ar<.60){sd[i] <- sd[i] * (.1)}
if(ar>.90){sd[i] <- sd[i] * (5)}
}
ar <- arth/itr
cat(ar, "for theta")
if(ar<.60){sdth <- sdth / (10)}
if(ar>.90){sdth <- sdth * (10)}
}
beta_p[[itr]]  <- betacoef
sigma_p[[itr]] <- sigma
theta_p[[itr]] <- theta
impdp[[itr]] <- impd[wh]
cv_p[[itr]]    <- cv
print(msevec[itr] <- mean((data[wh]-impd[wh])^2))
#print(theta)
#print(sigma)
#print(cv)
}
getwd()
